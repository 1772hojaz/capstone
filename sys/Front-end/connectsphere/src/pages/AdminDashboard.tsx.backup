import { Zap, Users, Eye, ShoppingBag, TrendingUp, DollarSign, AlertTriangle, RefreshCw, Clock } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { useState, useEffect } from 'react';
import { QrScanner } from '@yudiel/react-qr-scanner';
import { ResponsiveContainer, BarChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Bar, PieChart, Pie, Cell, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar } from 'recharts';
import StatCard from '../components/StatCard';
import Layout from '../components/Layout';

interface ManagementCardProps {
  icon: React.ReactNode;
  title: string;
  description: string;
  buttonText: string;
  link: string;
}

const ManagementCard = ({ icon, title, description, buttonText, link }: ManagementCardProps) => {
  const navigate = useNavigate();
  
  return (
    <div className="bg-white rounded-lg shadow-sm p-6 border border-gray-200 flex flex-col">
      <div className="text-blue-600 mb-4">{icon}</div>
      <h3 className="text-base font-semibold text-gray-900 mb-2">{title}</h3>
      <p className="text-sm text-gray-600 mb-4 flex-grow">{description}</p>
      <button
        onClick={() => navigate(link)}
        className="inline-block text-center px-4 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 transition"
      >
        {buttonText}
      </button>
    </div>
  );
};

type TrainingStage = 'data-collection' | 'preprocessing' | 'training' | 'validation' | 'deployment' | null;

const trainingStages: { id: TrainingStage; label: string }[] = [
  { id: 'data-collection', label: 'Data Collection' },
  { id: 'preprocessing', label: 'Preprocessing' },
  { id: 'training', label: 'Training' },
  { id: 'validation', label: 'Validation' },
  { id: 'deployment', label: 'Deployment' }
];

const AdminDashboard = () => {
  const [activeTab, setActiveTab] = useState<'overview' | 'analytics' | 'management' | 'qr-verify'>('overview');
  const [lastScannedCode, setLastScannedCode] = useState<string | null>(null);
  const [verificationStatus, setVerificationStatus] = useState<'none' | 'success' | 'error' | 'loading'>('none');
  const [nextRetrainTime, setNextRetrainTime] = useState<Date>(new Date(Date.now() + 12 * 60 * 60 * 1000));
  const [timeLeft, setTimeLeft] = useState<string>('');
  const [isRetraining, setIsRetraining] = useState(false);
  const [currentStage, setCurrentStage] = useState<TrainingStage>(null);

  useEffect(() => {
    const calculateTimeLeft = () => {
      const difference = nextRetrainTime.getTime() - Date.now();
      
      if (difference <= 0) {
        setTimeLeft('Ready to retrain');
        return;
      }

      const hours = Math.floor(difference / (1000 * 60 * 60));
      const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((difference % (1000 * 60)) / 1000);

      setTimeLeft(`${hours}h ${minutes}m ${seconds}s`);
    };

    calculateTimeLeft();
    const timer = setInterval(calculateTimeLeft, 1000);

    return () => clearInterval(timer);
  }, [nextRetrainTime]);

  const handleRetrain = () => {
    const shouldRetrain = window.confirm('Are you sure you want to start the model retraining process?');
    if (shouldRetrain) {
      setIsRetraining(true);
      
      // Simulate training pipeline stages
      const simulateStage = (stage: TrainingStage, delay: number) => {
        return new Promise<void>((resolve) => {
          setTimeout(() => {
            setCurrentStage(stage);
            resolve();
          }, delay);
        });
      };

      // Execute training pipeline
      const runTrainingPipeline = async () => {
        await simulateStage('data-collection', 0);
        await simulateStage('preprocessing', 3000);
        await simulateStage('training', 3000);
        await simulateStage('validation', 3000);
        await simulateStage('deployment', 3000);
        
        // Complete training
        setTimeout(() => {
          setIsRetraining(false);
          setCurrentStage(null);
          setNextRetrainTime(new Date(Date.now() + 12 * 60 * 60 * 1000));
        }, 2000);
      };

      runTrainingPipeline();
    }
  };

  // Activity Data
  const activityData = [
    { month: 'Jan', groups: 150, users: 180 },
    { month: 'Feb', groups: 180, users: 220 },
    { month: 'Mar', groups: 280, users: 290 },
    { month: 'Apr', groups: 250, users: 270 },
    { month: 'May', groups: 320, users: 350 },
    { month: 'Jun', groups: 380, users: 420 },
  ];

  // Model Performance Data
  const modelPerformanceData = [
    { name: 'Accuracy', value: 85 },
    { name: 'Precision', value: 78 },
    { name: 'Recall', value: 82 },
    { name: 'F1 Score', value: 80 },
  ];

  const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444'];

  // Training Progress Data
  const trainingProgressData = [
    { subject: 'Data Quality', A: 90 },
    { subject: 'Model Training', A: 85 },
    { subject: 'Validation', A: 88 },
    { subject: 'Testing', A: 82 },
    { subject: 'Deployment', A: 95 },
  ];

  return (
    <Layout title="Admin Dashboard">


      {/* Tabs - Clear visual hierarchy and state */}
      <div className="bg-white border-b border-gray-200 shadow-sm sticky top-[73px] z-40">
        <div className="px-3 sm:px-6">
          <nav className="flex gap-4 sm:gap-8" role="tablist" aria-label="Admin sections">
            <button
              onClick={() => setActiveTab('overview')}
              className={`py-4 text-sm font-medium border-b-2 transition focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${
                activeTab === 'overview' 
                  ? 'border-blue-600 text-blue-600 font-semibold' 
                  : 'border-transparent text-gray-600 hover:text-gray-900 hover:border-gray-300'
              }`}
              role="tab"
              aria-selected={activeTab === 'overview'}
              aria-controls="overview-panel"
            >
              Overview
            </button>
            <button
              onClick={() => setActiveTab('analytics')}
              className={`py-4 text-sm font-medium border-b-2 transition focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${
                activeTab === 'analytics' 
                  ? 'border-blue-600 text-blue-600 font-semibold' 
                  : 'border-transparent text-gray-600 hover:text-gray-900 hover:border-gray-300'
              }`}
              role="tab"
              aria-selected={activeTab === 'analytics'}
              aria-controls="analytics-panel"
            >
              Analytics
            </button>
            <button
              onClick={() => setActiveTab('management')}
              className={`py-4 text-sm font-medium border-b-2 transition focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${
                activeTab === 'management' 
                  ? 'border-blue-600 text-blue-600 font-semibold' 
                  : 'border-transparent text-gray-600 hover:text-gray-900 hover:border-gray-300'
              }`}
              role="tab"
              aria-selected={activeTab === 'management'}
              aria-controls="management-panel"
            >
              Management
            </button>
            <button
              onClick={() => setActiveTab('qr-verify')}
              className={`py-4 text-sm font-medium border-b-2 transition focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${
                activeTab === 'qr-verify' 
                  ? 'border-blue-600 text-blue-600 font-semibold' 
                  : 'border-transparent text-gray-600 hover:text-gray-900 hover:border-gray-300'
              }`}
              role="tab"
              aria-selected={activeTab === 'qr-verify'}
              aria-controls="qr-verify-panel"
            >
              QR Verification
            </button>
          </nav>
        </div>
      </div>

      {/* Main Content */}
      <main className="flex-1 px-4 sm:px-6 lg:px-8 py-6 sm:py-8">
        {/* Header */}
        <div className="mb-6 sm:mb-8">
          <div className="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-3 mb-2">
            <h1 className="text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-900">Admin Dashboard</h1>
            <div className="flex items-center gap-1 bg-blue-50 text-blue-700 px-3 py-1 rounded-full text-xs sm:text-sm font-medium w-fit">
              <Zap className="w-3.5 h-3.5 sm:w-4 sm:h-4" />
              <span>Admin Tools</span>
            </div>
          </div>
          <p className="text-sm sm:text-base text-gray-600">Platform metrics, moderation tools, and system settings for ConnectSphere</p>
        </div>

        {/* Tab Content */}
        {activeTab === 'overview' && (
          <div className="space-y-8">
            {/* Analytics Summary */}
            <div>
              <h2 className="text-lg font-semibold text-gray-900 mb-4">Analytics Summary</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <StatCard
                  title="Total Users"
                  value="1,245"
                  icon={<Users className="w-6 h-6" />}
                  color="blue"
                />
                <StatCard
                  title="Active Groups"
                  value="189"
                  icon={<Eye className="w-6 h-6" />}
                  color="green"
                />
                <StatCard
                  title="Total Transactions"
                  value="8,321"
                  icon={<ShoppingBag className="w-6 h-6" />}
                  color="blue"
                />
                <StatCard
                  title="Revenue"
                  value="$24,987"
                  icon={<DollarSign className="w-6 h-6" />}
                  color="red"
                />
              </div>
            </div>

            {/* Platform Activity */}
            <div>
              <h2 className="text-lg font-semibold text-gray-900 mb-4">Platform Activity</h2>
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <div className="h-[300px]">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart data={activityData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="month" />
                      <YAxis />
                      <Tooltip />
                      <Legend />
                      <Bar dataKey="groups" fill="#3B82F6" name="New Groups" />
                      <Bar dataKey="users" fill="#93C5FD" name="New Users" />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'analytics' && (
          <div className="space-y-12">
            {/* Retrain Button and Timer */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-6 space-y-6">
              <div className="flex justify-between items-center">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-blue-100 rounded-lg">
                    <Clock className="w-5 h-5 text-blue-600" />
                  </div>
                  <div>
                    <h3 className="text-sm font-semibold text-gray-900">Next Scheduled Retrain</h3>
                    <p className="text-lg font-bold text-blue-600">{timeLeft}</p>
                  </div>
                </div>
                <button
                  onClick={handleRetrain}
                  disabled={isRetraining}
                  className={`inline-flex items-center gap-2 px-6 py-3 rounded-lg transition-colors duration-200 font-semibold shadow-sm
                    ${isRetraining 
                      ? 'bg-gray-400 cursor-not-allowed' 
                      : 'bg-blue-600 hover:bg-blue-700 text-white'}`}
                >
                  <RefreshCw className={`w-5 h-5 ${isRetraining ? 'animate-spin' : ''}`} />
                  {isRetraining ? 'Retraining...' : 'Retrain Model'}
                </button>
              </div>

              {/* Training Progress Line */}
              {isRetraining && (
                <div className="space-y-4">
                  <div className="flex justify-between items-center relative">
                    {/* Progress Line */}
                    <div className="absolute left-0 right-0 top-1/2 h-1 bg-gray-200 -translate-y-1/2" />
                    <div 
                      className="absolute left-0 top-1/2 h-1 bg-blue-600 -translate-y-1/2 transition-all duration-300"
                      style={{
                        width: `${
                          currentStage
                            ? ((trainingStages.findIndex(s => s.id === currentStage) + 1) / trainingStages.length) * 100
                            : 0
                        }%`
                      }}
                    />
                    
                    {/* Stage Markers */}
                    {trainingStages.map((stage, index) => {
                      const isCompleted = currentStage 
                        ? trainingStages.findIndex(s => s.id === currentStage) >= index
                        : false;
                      const isCurrent = stage.id === currentStage;
                      
                      return (
                        <div 
                          key={stage.id}
                          className="relative z-10 flex flex-col items-center gap-2"
                          style={{ width: '20px' }}
                        >
                          <div 
                            className={`w-5 h-5 rounded-full border-2 transition-colors duration-200
                              ${isCurrent 
                                ? 'border-blue-600 bg-white' 
                                : isCompleted 
                                  ? 'border-blue-600 bg-blue-600'
                                  : 'border-gray-300 bg-white'}`}
                          />
                          <p className={`text-xs font-medium whitespace-nowrap transition-colors duration-200
                            ${isCurrent 
                              ? 'text-blue-600' 
                              : isCompleted 
                                ? 'text-gray-700'
                                : 'text-gray-400'}`}
                          >
                            {stage.label}
                          </p>
                        </div>
                      );
                    })}
                  </div>
                </div>
              )}
            </div>
            
            {/* Model Performance Chart */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-8">
              <div className="flex items-center gap-3 mb-6">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <TrendingUp className="w-6 h-6 text-blue-600" />
                </div>
                <div>
                  <h3 className="text-xl font-semibold text-gray-900">Model Performance Metrics</h3>
                  <p className="text-sm text-gray-600 mt-1">Evaluation metrics for the recommendation system</p>
                </div>
              </div>
              <div className="h-[400px]">
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie
                      data={modelPerformanceData}
                      dataKey="value"
                      nameKey="name"
                      cx="50%"
                      cy="50%"
                      outerRadius={160}
                      innerRadius={120}
                      label
                    >
                      {modelPerformanceData.map((_entry, index) => (
                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                      ))}
                    </Pie>
                    <Tooltip />
                    <Legend verticalAlign="bottom" height={36} />
                  </PieChart>
                </ResponsiveContainer>
              </div>
              <div className="grid grid-cols-4 gap-4 mt-8">
                {modelPerformanceData.map((metric, index) => (
                  <div key={index} className="bg-gray-50 rounded-lg p-4">
                    <p className="text-sm text-gray-600">{metric.name}</p>
                    <p className="text-xl font-semibold text-gray-900 mt-1">{metric.value}%</p>
                  </div>
                ))}
              </div>
            </div>

            {/* Training Stage Progress */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-8">
              <div className="flex items-center gap-3 mb-6">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <Zap className="w-6 h-6 text-blue-600" />
                </div>
                <div>
                  <h3 className="text-xl font-semibold text-gray-900">Training Stage Progress</h3>
                  <p className="text-sm text-gray-600 mt-1">Current progress across different training stages</p>
                </div>
              </div>
              <div className="h-[400px]">
                <ResponsiveContainer width="100%" height="100%">
                  <RadarChart cx="50%" cy="50%" outerRadius="80%" data={trainingProgressData}>
                    <PolarGrid stroke="#E5E7EB" />
                    <PolarAngleAxis dataKey="subject" stroke="#6B7280" />
                    <PolarRadiusAxis angle={30} domain={[0, 100]} stroke="#6B7280" />
                    <Radar name="Progress" dataKey="A" stroke="#3B82F6" fill="#3B82F6" fillOpacity={0.4} />
                    <Legend verticalAlign="bottom" height={36} />
                    <Tooltip />
                  </RadarChart>
                </ResponsiveContainer>
              </div>
            </div>

            {/* System Status */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-8">
              <div className="flex items-center gap-3 mb-6">
                <div className="p-2 bg-green-100 rounded-lg">
                  <div className="w-6 h-6 flex items-center justify-center">
                    <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                  </div>
                </div>
                <div>
                  <h3 className="text-xl font-semibold text-gray-900">ML System Status</h3>
                  <p className="text-sm text-gray-600 mt-1">Real-time health monitoring of ML services</p>
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-4">
                <div className="bg-green-50 border border-green-200 rounded-lg p-6">
                  <div className="flex items-center gap-2 mb-2">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <p className="font-medium text-green-900">System Health</p>
                  </div>
                  <p className="text-sm text-green-800">All systems operational</p>
                </div>

                <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
                  <div className="flex items-center gap-2 mb-2">
                    <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                    <p className="font-medium text-blue-900">Response Time</p>
                  </div>
                  <p className="text-sm text-blue-800">85ms average</p>
                </div>

                <div className="bg-purple-50 border border-purple-200 rounded-lg p-6">
                  <div className="flex items-center gap-2 mb-2">
                    <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                    <p className="font-medium text-purple-900">Model Updates</p>
                  </div>
                  <p className="text-sm text-purple-800">Last updated 2h ago</p>
                </div>
              </div>

              <div className="bg-gray-50 rounded-lg p-6 mt-6">
                <h4 className="font-semibold text-gray-900 mb-4">System Health Checklist</h4>
                <div className="space-y-3">
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span>Recommendation Engine: Operational</span>
                  </div>
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span>Data Processing Pipeline: Running</span>
                  </div>
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span>Model Serving API: Active</span>
                  </div>
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span>Training Infrastructure: Available</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'qr-verify' && (
          <div className="space-y-6">
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4">QR Code Verification</h2>
              <div className="max-w-xl mx-auto">
                <div className="aspect-square w-full relative bg-gray-50 rounded-lg overflow-hidden mb-6">
                  <QrScanner
                    onDecode={(result: string) => {
                      setLastScannedCode(result);
                      setVerificationStatus('loading');
                      // Simulate verification process
                      setTimeout(() => {
                        // Here you would typically make an API call to verify the QR code
                        // For now, we'll simulate a successful verification
                        setVerificationStatus('success');
                      }, 1500);
                    }}
                    onError={(error: Error) => {
                      console.error(error);
                      setVerificationStatus('error');
                    }}
                  />
                </div>

                {/* Verification Status */}
                <div className="space-y-4">
                  {verificationStatus === 'loading' && (
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                      <div className="flex items-center gap-3">
                        <div className="animate-spin">
                          <RefreshCw className="w-5 h-5 text-blue-600" />
                        </div>
                        <p className="text-blue-700 font-medium">Verifying QR code...</p>
                      </div>
                    </div>
                  )}

                  {verificationStatus === 'success' && (
                    <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                      <div className="flex items-center gap-3">
                        <div className="w-5 h-5 rounded-full bg-green-100 flex items-center justify-center">
                          <div className="w-2 h-2 rounded-full bg-green-600" />
                        </div>
                        <div>
                          <p className="text-green-700 font-medium">QR Code Valid</p>
                          <p className="text-green-600 text-sm mt-1">Code: {lastScannedCode}</p>
                        </div>
                      </div>
                    </div>
                  )}

                  {verificationStatus === 'error' && (
                    <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                      <div className="flex items-center gap-3">
                        <AlertTriangle className="w-5 h-5 text-red-600" />
                        <div>
                          <p className="text-red-700 font-medium">Verification Failed</p>
                          <p className="text-red-600 text-sm mt-1">Please try scanning again</p>
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                <div className="mt-6 bg-gray-50 rounded-lg p-4">
                  <h3 className="text-sm font-medium text-gray-900 mb-2">Instructions:</h3>
                  <ul className="text-sm text-gray-600 space-y-2">
                    <li>1. Position the QR code within the scanner frame</li>
                    <li>2. Hold the code steady until it's recognized</li>
                    <li>3. Wait for verification results</li>
                    <li>4. Check the status message below the scanner</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'management' && (
          <div>
            <h2 className="text-lg font-semibold text-gray-900 mb-4">Management Tools</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              <ManagementCard
                icon={<Users className="w-8 h-8" />}
                title="User Management"
                description="View, edit, or remove user accounts and manage their roles and permissions."
                buttonText="Manage Users"
                link="/users"
              />
              <ManagementCard
                icon={<ShoppingBag className="w-8 h-8" />}
                title="Group Moderation"
                description="Oversee and moderate group-buy listings, ensuring compliance and quality."
                buttonText="Moderate Groups"
                link="/moderation"
              />
              <ManagementCard
                icon={<TrendingUp className="w-8 h-8" />}
                title="Product Catalog"
                description="Update and manage the inventory of products available for group buying."
                buttonText="Edit Products"
                link="/products"
              />
              <ManagementCard
                icon={<DollarSign className="w-8 h-8" />}
                title="System Settings"
                description="Configure global platform settings, notifications, and error integration points."
                buttonText="Configure System"
                link="/settings"
              />
            </div>
          </div>
        )}
      </main>

      {/* Admin Helper Message */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 mt-8 mx-4 sm:mx-6 lg:mx-8 mb-8">
        <div className="flex items-center gap-3 mb-4">
          <div className="p-2 bg-blue-100 rounded-lg">
            <AlertTriangle className="w-6 h-6 text-blue-600" />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-blue-900">Admin Guidelines</h3>
            <p className="text-sm text-blue-700 mt-1">Important information for managing groups</p>
          </div>
        </div>
        <div className="space-y-3 text-sm text-blue-800">
          <p>• As an admin, you are responsible for creating new group buying opportunities for traders</p>
          <p>• Set realistic target member counts and deadlines to ensure group success</p>
          <p>• Monitor active groups and process payments promptly when targets are reached</p>
          <p>• Ensure accurate product descriptions and pricing information</p>
          <p>• Coordinate with local pickup locations for smooth delivery process</p>
        </div>
      </div>
    </Layout>
  );
};

export default AdminDashboard;
